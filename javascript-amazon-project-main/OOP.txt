Procedural Programming
Procedural programming is a programming paradigm that focuses on procedures or functions that perform specific tasks. It is a set of step-by-step instruction = a function

OOP (Object Oriented Programming)
Organize our code into Objects

Why do we use OOP?
It tries to represent the real world
- Encapsulation: Hiding the internal details of an object from the outside world
- Inheritance: Creating a new object based on an existing object
- Polymorphism: The ability of an object to take on multiple forms
- Abstraction: Hiding the implementation details of an object from the outside world

Easy to create multiple objecrs

We can use a function to create/generate multple objects

Use PascalCase for things that generate objects/class: start every word with a capital
class = obj generator

OOP = organizing our code into objects (tries to represent the real world)
class = help us generate these object; basically class is an object generator

Features of class
1. Constructor = let us run setup code after creating an object; it let us put set up code inside the class & help us make code look cleaner
so everytime we dont need to assign the values and replace it; just declare and distribute
SET UP CODE (SETUP this)

  this.localStorageKey = localStorageKey; // this will point to the object we will create let say object is businessCart then this will point businessCart.localStorageKey (businessCart of Cart class has been assigned with the details provided by input) = localStorageKey 
  this.loadFromStorage();// this will run the loadFromStorage function inside the class

More details about Constructor
1. It has to be named "constructor"
2. Should not return anything

Private can only be accesed inside the class

Inheritance let's reuse the code between classes

this let's an object access its own properties; this can be used anywhere in the code console.log(this); // undefined would be output
summary of this
1. Inside a method, "this" points to the outer object
2. Inside a function this = undefined; but we can change it; using .call()
3. Arrow functions do not change the value of this

Also not that if we dont create a constructor then by default it wil run the parents constructor and that's why if the Clothing class is empty then the code will still run

But there is a problem now that we converted all of the products into Product class but some of them belongs to Clothing class too and some others to other class then how are we going to know which product belongs to which class

so for that we have a self-created property/variable called: type and thus type will help to categorize product into their respective classes
and thus this property is known as a Discriminator property which helps us to discriminate that where the product should belong to which class

but now again when we send this extrInfoHTML() to amazon.js then we don't know to what class it belongs whether Product or Clothing class
so there comes POLYMORPHISM which means we can use a method without knowing the class

so instead of doing if/else we let class class decide what this method does

Built in classes are the classes that are providrd by the language ex: Date()

child class cannot access the private #speed property (private properties can only be accessed in the same class and not even in child class); so we need to keep speed a public property

  // In other languages a property can be public, private or protected = it can be accessed inside a class and its child classes
  // In JavaScript, a property can only be public or private and that's why OOP is less popular in js because of absence of some features like protected properties





  <!DOCTYPE html>
<html>

<head>
  <title>Orders</title>

  <!-- This code is needed for responsive design to work.
      (Responsive design = make the website look good on
      smaller screen sizes like a phone or a tablet). -->
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Load a font called Roboto from Google Fonts. -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">

  <!-- Here are the CSS files for this page. -->
  <link rel="stylesheet" href="styles/shared/general.css">
  <link rel="stylesheet" href="styles/shared/amazon-header.css">
  <link rel="stylesheet" href="styles/pages/orders.css">
</head>

<body>
  <div class="amazon-header">
    <div class="amazon-header-left-section">
      <a href="amazon.html" class="header-link">
        <img class="amazon-logo" src="images/amazon-logo-white.png">
        <img class="amazon-mobile-logo" src="images/amazon-mobile-logo-white.png">
      </a>
    </div>

    <div class="amazon-header-middle-section">
      <input class="search-bar" type="text" placeholder="Search">

      <button class="search-button">
        <img class="search-icon" src="images/icons/search-icon.png">
      </button>
    </div>

    <div class="amazon-header-right-section">
      <a class="orders-link header-link" href="orders.html">
        <span class="returns-text">Returns</span>
        <span class="orders-text">& Orders</span>
      </a>

      <a class="cart-link header-link" href="checkout.html">
        <img class="cart-icon" src="images/icons/cart-icon.png">
        <div class="cart-quantity">3</div>
        <div class="cart-text">Cart</div>
      </a>
    </div>
  </div>

  <div class="main">
    <div class="page-title">Your Orders</div>

    <div class="orders-grid js-orders-grid">
      <!-- Orders will be dynamically generated here -->
    </div>
  </div>

  <script type="module">
    import { orders } from "../data/orders.js";
    import { products } from "../data/products.js";

    function renderOrders() {
      const ordersGrid = document.querySelector(".js-orders-grid");
      let ordersHTML = "";

      orders.forEach(order => {
        let orderHTML = `
          <div class="order-container">
            <div class="order-header">
              <div class="order-header-left-section">
                <div class="order-date">
                  <div class="order-header-label">Order Placed:</div>
                  <div>${order.date}</div>
                </div>
                <div class="order-total">
                  <div class="order-header-label">Total:</div>
                  <div>${order.total}</div>
                </div>
              </div>
              <div class="order-header-right-section">
                <div class="order-header-label">Order ID:</div>
                <div>${order.id}</div>
              </div>
            </div>
            <div class="order-details-grid">
        `;

        order.products.forEach(productId => {
          const product = products.find(p => p.id === productId);
          if (product) {
            orderHTML += `
              <div class="product-image-container">
                <img src="${product.image}">
              </div>
              <div class="product-details">
                <div class="product-name">${product.name}</div>
                <div class="product-delivery-date">Arriving on: ${order.deliveryDate}</div>
                <div class="product-quantity">Quantity: ${order.quantity}</div>
                <button class="buy-again-button button-primary">
                  <img class="buy-again-icon" src="images/icons/buy-again.png">
                  <span class="buy-again-message">Buy it again</span>
                </button>
              </div>
              <div class="product-actions">
                <a href="tracking.html?orderId=${order.id}&productId=${product.id}">
                  <button class="track-package-button button-secondary">Track package</button>
                </a>
              </div>
            `;
          }
        });

        orderHTML += `
            </div>
          </div>
        `;

        ordersHTML += orderHTML;
      });

      ordersGrid.innerHTML = ordersHTML;
    }

    renderOrders();
  </script>
</body>

</html>